# This is a comment.
# Configuration section contains root-defined variables.
# Variables can be substituted if you put brackets around it.
# Just look at the 'name' variable.
#
# Configuration has special use variables:
#     name : Configuration name
#     list : Build targets

[configuration]
name = "win-x64-dev"
tmp  = "out/<name>/tmp"
out  = "out/<name>/out"
bin  = "out/<name>/out/bin"
src  = "src"
res  = "res"
list = "cook.exe"




# This recipe is a child of the config from the above.
# Tool will search configuration build target through its recipes.
# This recipe fits 'cook.exe'
#
# As you can see, single quots encode file path.
#
# Recipe has special use variables:
#     pattern : Wildcard template for the target search
#     output  : Result of the recipe (Useful with 'prepare' command)
#     command : Command to execute

[recipe]
pattern = "*.exe"
output  = "'<bin>/{file}'"
src     = prepare "<src>/{file}/*.cc"
res     = prepare "<res>/{file}/*.rc"
args    = "-o {output} {src} {res}"
command = "clang++ {args}"




# Do you see a 'prepare' command from the above recipe?
# It will search for all wildcarded files.
# Then cook tool finds recipe for all those files.
# Output of this recipe will be written in the 'src' variable of its 'parent' recipe (above).

[recipe]
pattern = "<src>/(file)/*.cc"
output  = "'<tmp>/(file)/{filename}.o'"
inc     = "-I 'inc'"
args    = "-c -Wall -Wextra -std=c++23"
command = "clang++ -o {output} '<src>/(file)/{file}' {args} {inc}"



# The same stuff with resource files.

[recipe]
pattern = "<res>/(file)/*.rc"
output  = "'<tmp>/(file)/{filename}.o'"
command = "windres -o {output} '<res>/(file)/{file}'"